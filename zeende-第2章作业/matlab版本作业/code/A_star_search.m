function [path,OPEN]= A_star_search(map,MAX_X,MAX_Y)
%%
%This part is about map/obstacle/and other settings
    %pre-process the grid map, add offset
    size_map = size(map,1);
    Y_offset = 0;
    X_offset = 0;
    
    %Define the 2D grid map array.
    %Obstacle=-1, Target = 0, Start=1
    MAP=2*(ones(MAX_X,MAX_Y));
    
    %Initialize MAP with location of the target
    xval=floor(map(size_map, 1)) + X_offset;
    yval=floor(map(size_map, 2)) + Y_offset;
    xTarget=xval;
    yTarget=yval;
    MAP(xval,yval)=0;
    
    %Initialize MAP with location of the obstacle
    for i = 2: size_map-1
        xval=floor(map(i, 1)) + X_offset;
        yval=floor(map(i, 2)) + Y_offset;
        MAP(xval,yval)=-1;
    end 
    
    %Initialize MAP with location of the start point
    xval=floor(map(1, 1)) + X_offset;
    yval=floor(map(1, 2)) + Y_offset;
    xStart=xval;
    yStart=yval;
    MAP(xval,yval)=1;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %LISTS USED FOR ALGORITHM
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %OPEN LIST STRUCTURE
    %--------------------------------------------------------------------------
    %IS ON LIST 1/0 |X val |Y val |Parent X val |Parent Y val |h(n) |g(n)|f(n)|
    %--------------------------------------------------------------------------
    OPEN=[];
    %CLOSED LIST STRUCTURE
    %--------------
    %X val | Y val |
    %--------------
    % CLOSED=zeros(MAX_VAL,2);
    CLOSED=[];

    %Put all obstacles on the Closed list
    k=1;%Dummy counter
    for i=1:MAX_X
        for j=1:MAX_Y
            if(MAP(i,j) == -1)
                CLOSED(k,1)=i;
                CLOSED(k,2)=j;
                k=k+1;
            end
        end
    end
    CLOSED_COUNT=size(CLOSED,1);
    %set the starting node as the first node
    xNode=xval;
    yNode=yval;
    OPEN_COUNT=1;
    goal_distance=distance(xNode,yNode,xTarget,yTarget);
    path_cost=0;
    OPEN(OPEN_COUNT,:)=insert_open(xNode,yNode,xNode,yNode,goal_distance,path_cost,goal_distance);

    %OPEN(OPEN_COUNT,1)=0;
    CLOSED_COUNT=CLOSED_COUNT+1;
    CLOSED(CLOSED_COUNT,1)=xNode;
    CLOSED(CLOSED_COUNT,2)=yNode;
    

    
%%
%This part is your homework
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% START ALGORITHM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    FindPath=0;
    while(1) %you have to dicide the Conditions for while loop exit 
        if((sum(OPEN(:,1)))==0 || FindPath)
            break
        end
        
        %找openlist里fn最小的节点
        i_min = min_fn(OPEN,OPEN_COUNT,xTarget,yTarget);
        OPEN(i_min,1) = 0;%标记为弹出
        Data_Join = OPEN(i_min,[2,3,7]);% x，y，gn
         %加入CLOSE LIST
         CLOSED_COUNT = CLOSED_COUNT + 1;
         CLOSED(CLOSED_COUNT,:) = [Data_Join(1),Data_Join(2)];
         %拓展
         Exp_Data = expand_array(Data_Join(1),Data_Join(2),Data_Join(3),xTarget,yTarget,CLOSED,MAX_X,MAX_Y);
         if(~isempty(Exp_Data))
             %在发现的拓展中循环
            for n=1:1:length(Exp_Data(:,1))
                x_exp = Exp_Data(n,1);%x
                y_exp = Exp_Data(n,2);%y
                hn = Exp_Data(n,3);
                gn = Exp_Data(n,4);
                fn = Exp_Data(n,5);
                %if find target 
                if(x_exp == xTarget && y_exp == yTarget)
                    FindPath = 1;
                    OPEN_COUNT = OPEN_COUNT + 1;
                    OPEN(OPEN_COUNT,:) = insert_open(x_exp,y_exp,Data_Join(1),Data_Join(2),hn,gn,fn);
                    final_index = OPEN_COUNT;
                    break;
                end
                %检查点在OPEN list的索引
                n_index = node_index(OPEN,x_exp,y_exp);
                if(n_index > OPEN_COUNT)
                    OPEN_COUNT = OPEN_COUNT  + 1;
                    %插入到openlist
                    OPEN(OPEN_COUNT,:) = insert_open(x_exp,y_exp,Data_Join(1),Data_Join(2),hn,gn,fn);
                else%如果已经存在了，判断从当前节点经过是否更优
                    if(OPEN(n_index,8)> fn )
                        OPEN(n_index,4) = Data_Join(1);
                        OPEN(n_index,5) = Data_Join(2);
                        OPEN(n_index,6) = hn;
                        OPEN(n_index,7) = gn;
                        OPEN(n_index,8) = fn;
                    end
                end
            end
         end
        
    end %End of While Loop
    
    %Once algorithm has run The optimal path is generated by starting of at the
    %last node(if it is the target node) and then identifying its parent node
    %until it reaches the start node.This is the optimal path
    
    %
    %How to get the optimal path after A_star search?
    %please finish it
    %
    
   path = [];
   if ~FindPath
        return
    else
        n = 1;
        path(n,:) = [xTarget,yTarget];
        while(final_index > 1)
            xval = OPEN(final_index,4);
            yval = OPEN(final_index,5);
            final_index = node_index(OPEN,xval,yval);
            n = n +1;
            path(n,:) = [xval,yval];
        end
    end
    
    path(n+1,:) = [xStart,yStart];
    path = flip(path);
end